---
import { getLangFromUrl, useTranslations } from "@/i18n/utils"
import Event from "./Event.astro"
import { getCollection, render } from "astro:content"
import { cn } from "@/lib/utils"

interface Props {
  type: "past" | "upcoming"
  displayType: "about" | "landing-page"
  class?: string
}

const { type, displayType = "about" } = Astro.props
const t = useTranslations(getLangFromUrl(Astro.url))
const lang = getLangFromUrl(Astro.url)

const events = (await getCollection("events"))
  .filter(
    (event) =>
      ("past" === type && event.data.endDate < new Date()) ||
      ("upcoming" === type && event.data.endDate >= new Date()),
  )
  .filter((item) => item.slug.startsWith(`${lang}/`))
---

{displayType === "about" && <h2 id={`${type}-events`}>{t(`event.${type}`)}</h2>}

<div class={cn("flex flex-col gap-4", Astro.props.class)}>
  {events.length === 0 && <p>{t(`event.no-${type}`)}</p>}
  {
    events
      .toSorted((a, b) => {
        if (type === "upcoming") {
          return a.data.startDate < b.data.startDate ? -1 : 1
        }

        return a.data.startDate < b.data.startDate ? 1 : -1
      })
      .map(async (event) => {
        const { Content } = await render(event)

        return (
          <Event {...event.data} slug={event.slug}>
            <Content />
          </Event>
        )
      })
  }
</div>
